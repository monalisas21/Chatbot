# -*- coding: utf-8 -*-
"""NLP_chatBot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16pxbppelRLeD7FSQp6q8nTluxfTRUahd
"""

from google.colab import files
uploaded = files.upload()

import os
print(os.listdir())

!pip install sentence-transformers spacy

import os
import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
import spacy

# Load spacy model (English small)
!python -m spacy download en_core_web_sm
nlp = spacy.load("en_core_web_sm")

print("Loading dataset and model...")
from google.colab import files
uploaded = files.upload()


# Load dataset (ensure file is uploaded to Colab files or mounted)
file_path = "bpcl_chatbot_newdataset.csv"
if not os.path.exists(file_path):
    raise FileNotFoundError(f"File '{file_path}' not found. Upload it to Colab first.")

faq_df = pd.read_csv(file_path)

# Load sentence-transformer model
model = SentenceTransformer("all-MiniLM-L6-v2")

# Prepare embeddings
faq_questions = faq_df["Q"].str.lower().tolist()
faq_embeddings = model.encode(faq_questions, convert_to_tensor=True)

greeting_responses = {
    "hi": "Hello! How can I assist you with BPCL services?",
    "hello": "Hi there! How can I help you today?",
    "hey": "Hey! What can I do for you?",
    "good morning": "Good morning! How may I assist you?",
    "good afternoon": "Good afternoon! How can I help?",
    "good evening": "Good evening! How can I assist you?"
}

def get_best_match(user_question):
    user_question = user_question.lower().strip()

    if user_question in greeting_responses:
        return greeting_responses[user_question]

    doc = nlp(user_question)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    pos_tags = [(token.text, token.pos_) for token in doc]

    user_embedding = model.encode(user_question, convert_to_tensor=True)
    scores = util.pytorch_cos_sim(user_embedding, faq_embeddings)

    best_match_idx = scores.argmax().item()
    best_score = scores[0][best_match_idx].item()

    if best_score < 0.5:
        return f"I'm sorry, I couldn't find an exact answer. (Entities detected: {entities}) Try rephrasing your question."

    return faq_df.iloc[best_match_idx]["A"]

# Test the chatbot function with input
while True:
    user_input = input("You: ")
    if user_input.lower() in ['exit', 'quit', 'stop']:
        print("Chatbot: Goodbye!")
        break
    response = get_best_match(user_input)
    print("Chatbot:", response)

faq_df = pd.read_csv(file_path)
print("Columns in dataset:", faq_df.columns.tolist())
print(faq_df.head())  # See the first few rows

